# =================================================================
# Docker Compose for the Full SIMS Project Stack
# =================================================================
# This file orchestrates the entire application, including the core SIMS services,
# workflow automation with n8n, and the AI/LLM stack with Ollama.

# Reusable Service Snippets (YAML Anchors)
x-n8n: &service-n8n
  image: n8nio/n8n:latest
  networks: ['sims-net']
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_USER=${POSTGRES_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ENCRYPTION_KEY
    - N8N_USER_MANAGEMENT_JWT_SECRET
    - OLLAMA_HOST=${OLLAMA_HOST:-ollama:11434}
  env_file:
    - .env

x-ollama: &service-ollama
  image: ollama/ollama:latest
  container_name: ollama
  networks: ['sims-net']
  restart: unless-stopped
  ports:
    - "11434:11434"
  volumes:
    - ollama_storage:/root/.ollama

x-init-ollama: &init-ollama
  image: ollama/ollama:latest
  networks: ['sims-net']
  container_name: ollama-pull-llama
  volumes:
    - ollama_storage:/root/.ollama
  entrypoint: /bin/sh
  environment:
    - OLLAMA_HOST=ollama:11434
  command: >
    -c "sleep 3; ollama pull llama3.2"

# Service Definitions
services:
  # --- Core SIMS Application ---
  frontend:
    build: ./setup/frontend
    ports:
      - "8080:80"
    restart: unless-stopped
    networks:
      - sims-net

  api:
    build: ./setup/api
    ports:
      - "5321:5321"
    environment:
      - ASPNETCORE_URLS=http://+:5321
      - SQL_CONNECTION_STRING=Server=sql-db;Database=SIMS;User ID=sa;Password=${SQL_PASSWORD};TrustServerCertificate=True;Encrypt=False
      - MONGO_CONNECTION_STRING=mongodb://${MONGO_USER}:${MONGO_PASSWORD}@mongo-db:27017/sims
    depends_on:
      sql-db:
        condition: service_healthy
      mongo-db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - sims-net

  # --- SIMS Databases ---
  sql-db:
    build: ./setup/mssql-init
    user: "${UID}:${GID}"
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=${SQL_PASSWORD}
      - MSSQL_CPU_COUNT=1
    volumes:
      - ./data/sql:/var/opt/mssql
    ports:
      - "1433:1433"
    restart: unless-stopped
    networks:
      - sims-net
    healthcheck:
      test: ["CMD-SHELL", "sqlcmd -S localhost -U sa -P \"$${SA_PASSWORD}\" -C -Q 'SELECT 1'"]
      interval: 10s
      retries: 10
      timeout: 5s

  mongo-db:
    image: mongo:latest
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
    volumes:
      - ./data/mongo:/data/db
      - ./setup/mongo-init:/docker-entrypoint-initdb.d
    ports:
      - "27017:27017"
    restart: unless-stopped
    networks:
      - sims-net
    healthcheck:
      test: ["CMD-SHELL", "mongosh --eval 'db.adminCommand(\"ping\")' -u \"$${MONGO_USER}\" -p \"$${MONGO_PASSWORD}\" --quiet"]
      interval: 10s
      retries: 10
      timeout: 5s

  # --- Management & Tooling ---
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    user: "${UID}:${GID}"
    environment:
      - SA_PASSWORD=${SQL_PASSWORD}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SECURITY_ALLOW_EMBEDDING=true
    volumes:
      - ./data/grafana:/var/lib/grafana
      - ./setup/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./setup/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./setup/grafana/dashboards:/var/lib/grafana/dashboards
    restart: unless-stopped
    networks:
      - sims-net

  portainer:
    image: portainer/portainer-ce:latest
    ports:
      - "9443:9443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./data/portainer:/data
    restart: unless-stopped
    networks:
      - sims-net

  # --- Workflow Automation (n8n) ---
  postgres:
    image: postgres:16-alpine
    hostname: postgres
    networks: ['sims-net']
    restart: unless-stopped
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10

  n8n-import:
    <<: *service-n8n
    hostname: n8n-import
    container_name: n8n-import
    entrypoint: /bin/sh
    command:
      - "-c"
      - "n8n import:credentials --separate --input=/sims/credentials && n8n import:workflow --separate --input=/sims/workflows"
    volumes:
      - ./setup/n8n:/sims
    depends_on:
      postgres:
        condition: service_healthy

  n8n:
    <<: *service-n8n
    hostname: n8n
    container_name: n8n
    restart: unless-stopped
    ports:
      - "5678:5678"
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./setup/n8n:/sims
      - ./shared:/data/shared
    depends_on:
      postgres:
        condition: service_healthy
      n8n-import:
        condition: service_completed_successfully

  # --- AI / LLM Stack (Ollama) ---
  qdrant:
    image: qdrant/qdrant
    hostname: qdrant
    container_name: qdrant
    networks: ['sims-net']
    restart: unless-stopped
    ports:
      - "6333:6333"
    volumes:
      - qdrant_storage:/qdrant/storage

  ollama-cpu:
    profiles: ["cpu"]
    <<: *service-ollama

  ollama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *service-ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  ollama-gpu-amd:
    profiles: ["gpu-amd"]
    <<: *service-ollama
    image: ollama/ollama:rocm
    devices:
      - "/dev/kfd"
      - "/dev/dri"

  ollama-pull-llama-cpu:
    profiles: ["cpu"]
    <<: *init-ollama
    depends_on:
      - ollama-cpu

  ollama-pull-llama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *init-ollama
    depends_on:
      - ollama-gpu

  ollama-pull-llama-gpu-amd:
    profiles: ["gpu-amd"]
    <<: *init-ollama
    image: ollama/ollama:rocm
    depends_on:
      - ollama-gpu-amd

# -----------------------------------------------------------------
# Global Definitions
# -----------------------------------------------------------------
volumes:
  n8n_storage:
  postgres_storage:
  ollama_storage:
  qdrant_storage:

networks:
  sims-net:
    driver: bridge


